package au.com.vaadinutils.help;

import org.apache.log4j.Logger;
import org.vaadin.johan.Toolbox;
import org.vaadin.johan.Toolbox.ORIENTATION;

import au.com.vaadinutils.user.UserSettingsStorage;
import au.com.vaadinutils.user.UserSettingsStorageFactory;

import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.Page;
import com.vaadin.server.Page.BrowserWindowResizeEvent;
import com.vaadin.server.Page.BrowserWindowResizeListener;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.BrowserFrame;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class HelpSplitPanel extends HorizontalSplitPanel implements View, HelpPageListener
{

	/**
	 * 
	 */
	private static final long serialVersionUID = 5011140025383708388L;
	@AutoGenerated
	private HorizontalLayout componentPane;
	private VerticalLayout helpPane;
	private VerticalLayout helpHolder = new VerticalLayout();

	transient Logger logger = Logger.getLogger(HelpSplitPanel.class);

	HelpIndex index = HelpIndexFactory.getHelpIndex();

	View component;
	private Enum<?> currentHelpId;
	private Button hideButton;
	UserSettingsStorage userSettings = UserSettingsStorageFactory.getUserSettingsStorage();
	private float lastSplitPosition;

	public HelpSplitPanel(View component)
	{
		super();
		this.component = component;
		if (component instanceof HelpPageListener)
		{
			((HelpPageListener) component).setHelpPageListener(this);
		}

		setImmediate(true);

		buildMainLayout();
		setSizeFull();
		((Component) component).setSizeFull();
		componentPane.addComponent((Component) component);

		// set the expand ratio to 1 so the toolbox component disappears and
		// Doesn't take 50% of the horizontal layout
		HelpSplitPanel.this.componentPane.setExpandRatio((Component) component, 1);

		Enum<?> helpId = ((HelpProvider) component).getHelpId();
		setHelpPageId(helpId);

		// adjustHelpSize(helpId, null);
		setSplitPosition(100, Unit.PERCENTAGE, false);
		this.setLocked(true);

		this.setImmediate(true);

		addSplitterClickListener(new SplitterClickListener()
		{

			private static final long serialVersionUID = -5061180192147147118L;

			@Override
			public void splitterClick(SplitterClickEvent event)
			{
				if (!isHelpHidden())
				{

					userSettings.store("HelpWidth-" + currentHelpId, "" + HelpSplitPanel.this.getSplitPosition());

				}

			}
		});

		lastSplitPosition = HelpSplitPanel.this.getSplitPosition();
		Refresher refresher = new Refresher();
		refresher.setRefreshInterval(10000);
		addExtension(refresher);
		refresher.addListener(new RefreshListener()
		{

			private static final long serialVersionUID = -7126127161079482643L;

			@Override
			public void refresh(Refresher source)
			{
				if (!helpHiding && lastSplitPosition != HelpSplitPanel.this.getSplitPosition())
				{
					lastSplitPosition = HelpSplitPanel.this.getSplitPosition();
					userSettings.store("HelpWidth-" + currentHelpId, "" + HelpSplitPanel.this.getSplitPosition());
				}
			}
		});

	}

	public View getView()
	{
		return component;
	}

	boolean helpHiding = false;

	private boolean isHelpHidden()
	{
		boolean hidden = false;
		String value = userSettings.get("HelpHidden-" + currentHelpId);

		if (value.equalsIgnoreCase("true"))
		{
			hidden = true;

		}

		return hidden;
	}

	private void adjustHelpSize(Enum<?> helpId)
	{

		int pos = 75;

		String value = userSettings.get("HelpWidth-" + helpId);

		try
		{
			pos = (int) Double.parseDouble(value);
		}
		catch (Exception e)
		{
			logger.info(e);
			userSettings.store("HelpWidth-" + helpId, "" + pos);
		}

		helpPane.setVisible(true);
		// helpHolder.setVisible(true);
		hideButton.setCaption("Hide");

		setSplitPosition(pos, Unit.PERCENTAGE, false);
	}

	@Override
	public void enter(ViewChangeEvent event)
	{
		// allow the View we are wrapping to process the enter event in the
		// normal way
		component.enter(event);
	}

	public void setHelpPageId(Enum<?> helpId)
	{
		setHelp(helpId);

	}

	private void buildMainLayout()
	{

		componentPane = new HorizontalLayout();
		componentPane.setImmediate(false);
		componentPane.setMargin(false);
		componentPane.setSizeFull();

		super.addComponent(componentPane);

		helpPane = new VerticalLayout();
		helpPane.setImmediate(false);
		helpPane.setMargin(true);
		helpPane.setHeight("" + (UI.getCurrent().getPage().getBrowserWindowHeight()) * .8);
		helpPane.setWidth("" + (UI.getCurrent().getPage().getBrowserWindowWidth() * .8));
		helpPane.addComponent(new Label("Loading help..."));

		tb = new Toolbox();
		tb.setOrientation(ORIENTATION.RIGHT_CENTER);
		tb.setIcon(FontAwesome.QUESTION);
		tb.setAnimationTime(500);
		tb.setFoldOnClickOnly(true);
		tb.setContent(helpPane);

		setSplitPosition(100, Unit.PERCENTAGE, false);
		setLocked(true);

		super.setSecondComponent(tb);

		Page.getCurrent().addBrowserWindowResizeListener(new BrowserWindowResizeListener()
		{

			private static final long serialVersionUID = -8548907013566961812L;

			@Override
			public void browserWindowResized(BrowserWindowResizeEvent event)
			{

				resizeHelp();
				tb.setToolboxVisible(false);

			}

		});

	}

	private void resizeHelp()
	{
		if (!showHelpOnPage)
		{
			helpPane.setHeight("" + (UI.getCurrent().getPage().getBrowserWindowHeight()) * .8);
			helpPane.setWidth("" + (UI.getCurrent().getPage().getBrowserWindowWidth() * .8));
			helpHolder.setHeight("" + (UI.getCurrent().getPage().getBrowserWindowHeight()) * .78);
			helpHolder.setWidth("" + (UI.getCurrent().getPage().getBrowserWindowWidth() * .79));
		}
		else
		{
			helpPane.setSizeFull();
			helpHolder.setSizeFull();
			helpPane.setMargin(false);
			helpHolder.setMargin(false);
			// helpPane.setWidth(""+(getWidth()*getSplitPosition()/100));
			// helpHolder.setWidth(""+(getWidth()*getSplitPosition()/100));
		}
	}

	@Override
	public void removeAllComponents()
	{
		throw new RuntimeException("Cant remove compoents this way");
	}

	@Override
	public void removeComponent(Component component)
	{
		throw new RuntimeException("Cant remove compoents this way");
	}

	@Override
	public void addComponent(Component component)
	{
		throw new RuntimeException("Cant add compoents this way");
	}

	boolean showHelpOnPage = false;
	private Toolbox tb;

	public void setHelp(final Enum<?> helpId)
	{

		// createHideButtonWindow();

		currentHelpId = helpId;
		helpPane.removeAllComponents();

		helpHolder = new VerticalLayout();
		// helpHolder.setSizeFull();
		// helpPane.addComponent(helpHolder);

		index.setHelpSource(helpId, helpHolder, new HelpDisplayedCallback()
		{

			@Override
			public void success()
			{
				helpPane.removeAllComponents();
				helpPane.addComponent(helpHolder);
				addFooter();
				resizeHelp();

			}

			@Override
			public void fail()
			{
				helpPane.removeAllComponents();
				helpPane.addComponent(helpHolder);
				addFooter();
				resizeHelp();

			}

			private void addFooter()
			{
				hideButton = new Button("Show Help On Page");
				hideButton.setStyleName(Reindeer.BUTTON_SMALL);
				hideButton.addClickListener(new ClickListener()
				{

					private static final long serialVersionUID = -521965129353754937L;

					@Override
					public void buttonClick(ClickEvent event)
					{
						HelpSplitPanel.super.removeComponent(HelpSplitPanel.super.getSecondComponent());
						HelpSplitPanel.super.setSecondComponent(helpPane);
						showHelpOnPage = true;
						setHelpPageId(currentHelpId);
						adjustHelpSize(currentHelpId);
						setLocked(false);
						resizeHelp();

					}
				});

				HorizontalLayout helpFooter = new HorizontalLayout();
				helpFooter.setWidth("100%");
				helpFooter.setSpacing(true);

				if (!showHelpOnPage)
				{

					Button closeButton = new Button("Close");
					closeButton.addClickListener(new ClickListener()
					{

						private static final long serialVersionUID = 8822575654757513760L;

						@Override
						public void buttonClick(ClickEvent event)
						{
							if (tb != null)
							{
								tb.setToolboxVisible(false);
							}

						}
					});

					helpFooter.addComponent(closeButton);
					helpFooter.setComponentAlignment(closeButton, Alignment.BOTTOM_LEFT);

					helpFooter.addComponent(hideButton);
					helpFooter.addComponent(new Label("Help id is " + helpId));

					helpFooter.setComponentAlignment(hideButton, Alignment.BOTTOM_RIGHT);

					closeButton.setStyleName(Reindeer.BUTTON_SMALL);

				}
				helpHolder.addComponent(helpFooter);

				helpHolder.setComponentAlignment(helpFooter, Alignment.BOTTOM_LEFT);
				// helpPane.setExpandRatio(helpLabel, .1f);

			}

		});

	}

	@Override
	public void setHelpPageListener(HelpPageListener helpSplitPanel)
	{
		throw new RuntimeException("This is the top level HelpPageListener, you cant set the HelpPageListener");

	}

}
