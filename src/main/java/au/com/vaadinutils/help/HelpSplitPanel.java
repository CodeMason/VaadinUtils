package au.com.vaadinutils.help;

import java.util.concurrent.ExecutionException;

import org.apache.log4j.Logger;

import au.com.vaadinutils.user.UserSettingsStorage;
import au.com.vaadinutils.user.UserSettingsStorageFactory;

import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ExternalResource;
import com.vaadin.shared.ui.BorderStyle;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.BrowserFrame;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class HelpSplitPanel extends HorizontalSplitPanel implements View, HelpPageListener
{

	/**
	 * 
	 */
	private static final long serialVersionUID = 5011140025383708388L;
	@AutoGenerated
	private HorizontalLayout componentPane;
	private VerticalLayout helpPane;

	transient Logger logger = Logger.getLogger(HelpSplitPanel.class);

	HelpIndex index = HelpIndexFactory.getHelpIndex();

	View component;
	private Enum<?> currentHelpId;
	private Button hideButton;
	private BrowserFrame help;
	private Label helpLabel;
	UserSettingsStorage userSettings = UserSettingsStorageFactory.getUserSettingsStorage();
	private float lastSplitPosition;

	public HelpSplitPanel(View component)
	{
		super();
		this.component = component;
		if (component instanceof HelpPageListener)
		{
			((HelpPageListener) component).setHelpPageListener(this);
		}

		setImmediate(true);

		buildMainLayout();
		setSizeFull();
		((Component) component).setSizeFull();
		componentPane.addComponent((Component) component);
		Enum<?> helpId = ((HelpProvider) component).getHelpId();
		setHelpPageId(helpId);

		adjustHelpSize(helpId, null);

		this.setImmediate(true);

		addSplitterClickListener(new SplitterClickListener()
		{

			private static final long serialVersionUID = -5061180192147147118L;

			@Override
			public void splitterClick(SplitterClickEvent event)
			{
				if (!isHelpHidden())
				{

					userSettings.store("HelpWidth-" + currentHelpId, "" + HelpSplitPanel.this.getSplitPosition());

				}

			}
		});

		lastSplitPosition = HelpSplitPanel.this.getSplitPosition();
		Refresher refresher = new Refresher();
		refresher.setRefreshInterval(10000);
		addExtension(refresher);
		refresher.addListener(new RefreshListener()
		{

			private static final long serialVersionUID = -7126127161079482643L;

			@Override
			public void refresh(Refresher source)
			{
				if (!helpHiding && lastSplitPosition != HelpSplitPanel.this.getSplitPosition())
				{
					lastSplitPosition = HelpSplitPanel.this.getSplitPosition();
					userSettings.store("HelpWidth-" + currentHelpId, "" + HelpSplitPanel.this.getSplitPosition());
				}
			}
		});

	}

	boolean helpHiding = false;

	private boolean isHelpHidden()
	{
		boolean hidden = false;
		String value = userSettings.get("HelpHidden-" + currentHelpId);

		if (value.equalsIgnoreCase("true"))
		{
			hidden = true;

		}

		return hidden;
	}

	private void adjustHelpSize(Enum<?> helpId, Boolean hidden)
	{

		int pos = 75;

		if ((hidden == null && isHelpHidden()) || (hidden != null && hidden))
		{
			pos = 96;
			help.setVisible(false);
			helpLabel.setVisible(false);
			hideButton.setCaption("Help");
			helpHiding = true;
		}
		else
		{
			String value = userSettings.get("HelpWidth-" + helpId);

			try
			{
				pos = (int) Double.parseDouble(value);
			}
			catch (Exception e)
			{
				logger.info(e);
				userSettings.store("HelpWidth-" + helpId, "" + pos);
			}

			if (help != null)
			{
				help.setVisible(true);
				helpLabel.setVisible(true);
				hideButton.setCaption("Hide");
			}

		}
		setSplitPosition(pos, Unit.PERCENTAGE, false);
	}

	@Override
	public void enter(ViewChangeEvent event)
	{
		// allow the View we are wrapping to process the enter event in the
		// normal way
		component.enter(event);
	}

	public void setHelpPageId(Enum<?> helpId)
	{
		setHelp(helpId);

	}

	private void buildMainLayout()
	{

		componentPane = new HorizontalLayout();
		componentPane.setImmediate(false);
		componentPane.setMargin(false);
		componentPane.setSizeFull();

		super.addComponent(componentPane);

		helpPane = new VerticalLayout();
		helpPane.setImmediate(false);
		helpPane.setMargin(false);
		helpPane.setSizeFull();

		super.addComponent(helpPane);

	}

	@Override
	public void removeAllComponents()
	{
		throw new RuntimeException("Cant remove compoents this way");
	}

	@Override
	public void removeComponent(Component component)
	{
		throw new RuntimeException("Cant remove compoents this way");
	}

	@Override
	public void addComponent(Component component)
	{
		throw new RuntimeException("Cant add compoents this way");
	}

	public void setHelp(final Enum<?> helpId)
	{
		currentHelpId = helpId;
		helpPane.removeAllComponents();

		String helpPageId = null;
		try
		{
			helpPageId = index.lookupHelpIndex(helpId);
		}
		catch (ExecutionException e)
		{
			logger.error(e, e);
		}

		helpLabel = new Label("<div style='white-space:nowrap;'>Help id is " + helpId + "</div>");
		helpLabel.setContentMode(ContentMode.HTML);
		if (helpPageId != null)
		{
			// helpPane
			help = new BrowserFrame();
			help.setSource(new ExternalResource(index.getPageUrl() + helpPageId));
			help.setSizeFull();
			help.setStyleName("njadmin-hide-overflow-for-help");

			helpPane.addComponent(help);

			hideButton = new Button("Hide");
			hideButton.setStyleName(Reindeer.BUTTON_SMALL);
			hideButton.addClickListener(new ClickListener()
			{

				private static final long serialVersionUID = -521965129353754937L;

				@Override
				public void buttonClick(ClickEvent event)
				{
					if (hideButton.getCaption().equalsIgnoreCase("Hide"))
					{
						// before hiding save current width to cookie
						userSettings.store("HelpWidth-" + currentHelpId, "" + HelpSplitPanel.this.getSplitPosition());

						// store fact that it's hidden to cookie
						userSettings.store("HelpHidden-" + helpId, "true");

						adjustHelpSize(helpId, true);
					}
					else
					{

						userSettings.store("HelpHidden-" + helpId, "false");

						adjustHelpSize(helpId, false);

					}

				}
			});

			HorizontalLayout helpFooter = new HorizontalLayout();
			helpFooter.setWidth("100%");
			helpFooter.addComponent(helpLabel);
			helpFooter.addComponent(hideButton);
			helpFooter.setComponentAlignment(hideButton, Alignment.BOTTOM_RIGHT);

			helpPane.addComponent(helpFooter);
			helpPane.setExpandRatio(help, 1.0f);
			helpPane.setComponentAlignment(helpFooter, Alignment.BOTTOM_LEFT);
			// helpPane.setExpandRatio(helpLabel, .1f);
		}
		else
		{
			VerticalLayout help = new VerticalLayout();
			help.setSizeFull();

			Link link = new Link("To create a help page click here", new ExternalResource(index.getIndexPageUrl()),
					"wiki", 0, 0, BorderStyle.DEFAULT);

			help.addComponent(new Label(
					"Please create a help page in the wiki. The hyper link will take you to the index page in the wiki. You should add an entry for "
							+ helpId + " in the index and create the associated page in the wiki."));
			help.addComponent(link);
			help.addComponent(helpLabel);
			helpPane.addComponent(help);
		}
	}

	@Override
	public void setHelpPageListener(HelpPageListener helpSplitPanel)
	{
		throw new RuntimeException("This is the top level HelpPageListener, you cant set the HelpPageListener");

	}

}
