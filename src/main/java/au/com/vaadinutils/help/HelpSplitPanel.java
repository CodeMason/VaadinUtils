package au.com.vaadinutils.help;

import java.util.concurrent.ExecutionException;

import javax.servlet.http.Cookie;

import org.apache.log4j.Logger;

import com.github.wolfie.refresher.Refresher;
import com.github.wolfie.refresher.Refresher.RefreshListener;
import com.vaadin.annotations.AutoGenerated;
import com.vaadin.event.UIEvents.PollEvent;
import com.vaadin.event.UIEvents.PollListener;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.ExternalResource;
import com.vaadin.server.VaadinService;
import com.vaadin.shared.ui.BorderStyle;
import com.vaadin.shared.ui.label.ContentMode;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.BrowserFrame;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.Button.ClickListener;
import com.vaadin.ui.Component;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.HorizontalSplitPanel;
import com.vaadin.ui.Label;
import com.vaadin.ui.Link;
import com.vaadin.ui.UI;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.themes.Reindeer;

public class HelpSplitPanel extends HorizontalSplitPanel implements View, HelpPageListener
{

	/**
	 * 
	 */
	private static final long serialVersionUID = 5011140025383708388L;
	@AutoGenerated
	private HorizontalLayout componentPane;
	private VerticalLayout helpPane;
	private VerticalLayout helpHolder = new VerticalLayout();

	transient Logger logger = Logger.getLogger(HelpSplitPanel.class);

	HelpIndex index = HelpIndexFactory.getHelpIndex();

	View component;
	private Enum<?> currentHelpId;
	private Button hideButton;

	public HelpSplitPanel(View component)
	{
		super();
		this.component = component;
		if (component instanceof HelpPageListener)
		{
			((HelpPageListener) component).setHelpPageListener(this);
		}

		setImmediate(true);

		buildMainLayout();
		setSizeFull();
		((Component) component).setSizeFull();
		componentPane.addComponent((Component) component);
		Enum<?> helpId = ((HelpProvider) component).getHelpId();
		setHelpPageId(helpId);

		adjustHelpSize(helpId, null);

		this.setImmediate(true);

		addSplitterClickListener(new SplitterClickListener()
		{

			private static final long serialVersionUID = -5061180192147147118L;

			@Override
			public void splitterClick(SplitterClickEvent event)
			{
				if (!isHelpHidden())
				{
					Cookie myCookie = new Cookie("HelpWidth-" + currentHelpId, ""
							+ HelpSplitPanel.this.getSplitPosition());
					myCookie.setPath(VaadinService.getCurrentRequest().getContextPath());
					VaadinService.getCurrentResponse().addCookie(myCookie);
				}

			}
		});

		if (!(component instanceof DisableHelpPolling))
		{
			Refresher refresher = new Refresher();
			refresher.setRefreshInterval(10000);
			addExtension(refresher);
			refresher.addListener(new RefreshListener()
			{

				private static final long serialVersionUID = -7126127161079482643L;

				@Override
				public void refresh(Refresher source)
				{
					if (!isHelpHidden())
					{
						Cookie myCookie = new Cookie("HelpWidth-" + currentHelpId, ""
								+ HelpSplitPanel.this.getSplitPosition());
						myCookie.setPath(VaadinService.getCurrentRequest().getContextPath());
						VaadinService.getCurrentResponse().addCookie(myCookie);
					}
				}
			});
		}

	}

	private boolean isHelpHidden()
	{
		boolean hidden = false;
		Cookie[] cookies = VaadinService.getCurrentRequest().getCookies();
		for (Cookie cookie : cookies)
		{
			if (cookie.getName().equalsIgnoreCase("HelpHidden-" + currentHelpId))
			{

				if (cookie.getValue().equalsIgnoreCase("true"))
				{
					hidden = true;
					break;
				}

			}
		}
		return hidden;
	}

	private void adjustHelpSize(Enum<?> helpId, Boolean hidden)
	{

		int pos = 75;

		if ((hidden == null && isHelpHidden()) || (hidden != null && hidden))
		{
			pos = 96;
			helpHolder.setVisible(false);
			hideButton.setCaption("Help");
		}
		else
		{
			Cookie[] cookies = VaadinService.getCurrentRequest().getCookies();
			for (Cookie cookie : cookies)
			{
				if (cookie.getName().equalsIgnoreCase("HelpWidth-" + helpId))
				{
					try
					{
						pos = (int) Double.parseDouble(cookie.getValue());
					}
					catch (Exception e)
					{
						logger.error(e, e);
					}
				}
			}

			helpPane.setVisible(true);
			helpHolder.setVisible(true);
			hideButton.setCaption("Hide");

		}
		setSplitPosition(pos, Unit.PERCENTAGE, false);
	}

	@Override
	public void enter(ViewChangeEvent event)
	{
		// allow the View we are wrapping to process the enter event in the
		// normal way
		component.enter(event);
	}

	public void setHelpPageId(Enum<?> helpId)
	{
		setHelp(helpId);

	}

	private void buildMainLayout()
	{

		componentPane = new HorizontalLayout();
		componentPane.setImmediate(false);
		componentPane.setMargin(false);
		componentPane.setSizeFull();

		super.addComponent(componentPane);

		helpPane = new VerticalLayout();
		helpPane.setImmediate(false);
		helpPane.setMargin(false);
		helpPane.setSizeFull();

		super.addComponent(helpPane);

	}

	@Override
	public void removeAllComponents()
	{
		throw new RuntimeException("Cant remove compoents this way");
	}

	@Override
	public void removeComponent(Component component)
	{
		throw new RuntimeException("Cant remove compoents this way");
	}

	@Override
	public void addComponent(Component component)
	{
		throw new RuntimeException("Cant add compoents this way");
	}

	public void setHelp(final Enum<?> helpId)
	{
		currentHelpId = helpId;
		helpPane.removeAllComponents();

		helpHolder = new VerticalLayout();
		helpHolder.setSizeFull();
		helpPane.addComponent(helpHolder);

		index.setHelpSource(helpId, helpHolder, null);

		hideButton = new Button("Hide");
		hideButton.setStyleName(Reindeer.BUTTON_SMALL);
		hideButton.addClickListener(new ClickListener()
		{

			private static final long serialVersionUID = -521965129353754937L;

			@Override
			public void buttonClick(ClickEvent event)
			{
				if (hideButton.getCaption().equalsIgnoreCase("Hide"))
				{
					// before hiding save current width to cookie
					Cookie myCookie = new Cookie("HelpWidth-" + currentHelpId, ""
							+ HelpSplitPanel.this.getSplitPosition());
					myCookie.setPath(VaadinService.getCurrentRequest().getContextPath());
					VaadinService.getCurrentResponse().addCookie(myCookie);

					// store fact that it's hidden to cookie
					Cookie hiddenCookie = new Cookie("HelpHidden-" + helpId, "true");
					hiddenCookie.setPath(VaadinService.getCurrentRequest().getContextPath());
					VaadinService.getCurrentResponse().addCookie(hiddenCookie);

					adjustHelpSize(helpId, true);
				}
				else
				{

					Cookie hiddenCookie = new Cookie("HelpHidden-" + helpId, "false");
					hiddenCookie.setPath(VaadinService.getCurrentRequest().getContextPath());
					VaadinService.getCurrentResponse().addCookie(hiddenCookie);

					adjustHelpSize(helpId, false);

				}

			}
		});

		HorizontalLayout helpFooter = new HorizontalLayout();
		helpFooter.setWidth("100%");
		helpFooter.addComponent(new Label("Help id is " + helpId));
		helpFooter.addComponent(hideButton);
		helpFooter.setComponentAlignment(hideButton, Alignment.BOTTOM_RIGHT);

		helpPane.addComponent(helpFooter);
		helpPane.setExpandRatio(helpHolder, 1.0f);
		helpPane.setComponentAlignment(helpFooter, Alignment.BOTTOM_LEFT);
		// helpPane.setExpandRatio(helpLabel, .1f);

	}

	@Override
	public void setHelpPageListener(HelpPageListener helpSplitPanel)
	{
		throw new RuntimeException("This is the top level HelpPageListener, you cant set the HelpPageListener");

	}

}
